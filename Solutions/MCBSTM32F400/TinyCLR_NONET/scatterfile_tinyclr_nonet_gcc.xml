<?xml version="1.0"?>
<ScatterFile xmlns="http://schemas.microsoft.com/netmf/ScatterfileSchema.xsd">

    <!-- STM32F4 with 1M Flash, 128k SRAM, and 64k DATA CCM -->

    <Set Name="Valid" Value="false"/>

    <!-- ################################################################################ -->
    <!-- Memory Region base and size values for physical hardware to help clarify the mapping
         by making Symbolic names available instead of a bunch of numbers. These values are
         fixed in hardware and therefore, don't change.
    -->
    <!-- Internal FLASH -->
    <Set Name="IFLASH_BaseAddress"      Value="0x08000000"/>
    <Set Name="IFLASH_Size"             Value="0x00100000"/><!-- 1MB -->

    <!-- Core Coupled Memory (CCM) [D-Bus] -->
    <Set Name="CCM_BaseAddress"         Value="0x10000000"/>
    <Set Name="CCM_Size"                Value="0x00010000"/><!-- 64KB -->

    <!-- Internal SRAM -->
    <Set Name="IRAM_BaseAddress"        Value="0x20000000"/>
    <Set Name="IRAM_Size"               Value="0x00020000"/><!-- 128KB -->

    <!-- External NOR Flash-->
    <Set Name="NOR_BaseAddress"         Value="0x60000000"/>
    <Set Name="NOR_Size"                Value="0x00800000"/><!-- 8MB -->

    <!-- External SRAM -->
    <Set Name="EXTRAM_BaseAddress"      Value="0x68000000"/>
    <Set Name="EXTRAM_Size"             Value="0x00200000"/><!-- 2MB -->

    <!-- Solution/Project specific usage settings -->
    <!-- Internal CCM (D-Bus) -->
    <!-- Put Stack in CCM for high speed access, reducing overhead of stack usage -->
    <Set Name="Stack_Bottom"            Value="%CCM_BaseAddress%"/>
    <Set Name="Stack_Size"              Value="%CCM_Size%" />

    <!-- External SRAM -->
    <Set Name="Heap_BaseAddress"        Value="%EXTRAM_BaseAddress%"/>

    <!-- External NOR FLASH -->
    <!-- Configuration section is at base of external NOR flash
         This needs to be in the same block storage device as the
         deployment region to enable the MFDeploy to access it.
         ( Due to device side library implementation limitation )
    -->
    <Set Name="Config_BaseAddress"      Value="%NOR_BaseAddress%"/>
    <Set Name="Config_Size"             Value="0x00010000"/><!-- 64KB -->

    <!-- DAT region goes into external NOR Flash -->
    <Set Name="Data_BaseAddress"        Value="%Config_BaseAddress% + %Config_Size%"/>
    <Set Name="Data_Size"               Value="0x00030000"/><!-- 192KB -->

    <!-- [Deployment fills the rest of external NOR flash...] -->

    <!-- Internal FLASH -->
    <!-- TinyBooter sits at power on Reset vector -->
    <Set Name="BooterCode_BaseAddress"  Value="%IFLASH_BaseAddress%"/>
    <Set Name="BooterCode_Size"         Value="0x00010000"/><!-- 64KB -->

    <If Name="TARGETLOCATION" Value="FLASH">
        <!-- Internal FLASH -->

        <!-- Native Code section -->
        <Set Name="Code_BaseAddress"    Value="%BooterCode_BaseAddress% + %BooterCode_Size%"/>
        <Set Name="Code_Size"           Value="%IFLASH_Size%-%BooterCode_Size%"/>

        <!-- =========================================================== -->
        <If Name="TARGETTYPE" Value="Release">
            <!-- ALL of external RAM is enabled for the CLR HEAP -->
            <Set Name="Heap_Size"       Value="%EXTRAM_Size%"/>

            <Set Name="Valid"           Value="true"/>
        </If>
        <If Name="TARGETTYPE" Value="Debug">
            <!-- Use only 1MB of external RAM for Debug builds.
                 Can't use all of external RAM as the address pins overlap
                 with the SWD pins used for ETM tracing in Debug builds.
            -->
            <Set Name="Heap_Size"       Value="0x00100000"/><!--1MB-->

            
            <Set Name="Valid"           Value="true"/>
        </If>
    </If>

    <!-- ################################################################################ -->
    <If Name="Valid" Value="false">
        <Error Message="Configuration not recognized"/>
    </If>

    <EntryPoint Name="EntryPoint" />
    
    <NamedGroup Name="MEMORY">
        <LoadRegion Name="D_CCM" Base="%CCM_BaseAddress%" Size="%CCM_Size%" />
        <LoadRegion Name="IRAM" Base="%IRAM_BaseAddress%" Size="%IRAM_Size%" />
        <LoadRegion Name="LR_%TARGETLOCATION%" Base="%Code_BaseAddress%" Size="%Code_Size%" />
        <LoadRegion Name="EXTRAM" Base="%EXTRAM_BaseAddress%" Size="%EXTRAM_Size%" />
        <LoadRegion Name="LR_CONFIG" Base="%Config_BaseAddress%" Size="%Config_Size%"/>
        <LoadRegion Name="LR_DAT" Base="%Data_BaseAddress%" Size="%Data_Size%"/>
    </NamedGroup>

    <NamedGroup Name="SECTIONS">
        <!-- ========= INTERNAL FLASH ============================================ -->
        <ExecRegion Name="ER_%TARGETLOCATION%" Options="&gt;LR_%TARGETLOCATION%">
            <FileMapping Name="KEEP" Options="(*(SectionForPowerOnReset))" />
            <FileMapping Name="*(SectionForBootstrapOperations)"/>
            <FileMapping Name="*(SectionForFlashOperations)"/>
            
            <FileMapping Name="*(.text .text.* .gnu.linkonce.t.*);"/>
            <FileMapping Name="*(i.*)"/>
            <FileMapping Name="*(.glue_7t .glue_7);"/>
            <FileMapping Name="*(.eh_frame);"/>
            <FileMapping Name="*(.eh_frame_hdr);"/>
            <FileMapping Name="*(.gcc_except_table);"/>

            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="KEEP(*(.init))"/>
            <FileMapping Name="KEEP(*(.fini))"/>

            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="*(.rodata .rodata.* .constdata .constdata.* .conststring .conststring* .gnu.linkonce.r.*)"/>

            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="*(.ARM.extab* .gnu.linkonce.armextab.*)"/>

            <!-- preinit_array -->
            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="PROVIDE_HIDDEN (__preinit_array_start = .);"/>
            <FileMapping Name="KEEP(*(.preinit_array .preinit_array.*))"/>
            <FileMapping Name="PROVIDE_HIDDEN (__preinit_array_end = .);"/>
            
            <!-- init_array -->
            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="PROVIDE_HIDDEN (__init_array_start = .);"/>
            <FileMapping Name="KEEP(*(SORT(.init_array.*)))"/>
            <FileMapping Name="KEEP(*(.init_array))"/>
            <FileMapping Name="PROVIDE_HIDDEN (__init_array_end = .);"/>

            <!-- fini_array -->
            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="PROVIDE_HIDDEN (__fini_array_start = .);"/>
            <FileMapping Name="KEEP(*(SORT(.fini_array.*)))"/>
            <FileMapping Name="KEEP(*(.fini_array))"/>
            <FileMapping Name="PROVIDE_HIDDEN (__fini_array_end = .);"/>

            <FileMapping Name=". = ALIGN(4);"/>
        </ExecRegion>

        <FileMapping Name=". = ALIGN(4);"/>
        <FileMapping Name="__exidx_start = .;"/>

        <ExecRegion Name=".ARM.exidx" Options="&gt;LR_%TARGETLOCATION% ">
            <FileMapping Name="*(.ARM.exidx* .gnu.linkonce.armexidx.*)"/>
        </ExecRegion> 

        <FileMapping Name=". = ALIGN(4);"/>
        <FileMapping Name="__exidx_end = .;"/>

        <!-- ========= INTERNAL RAM ============================================= -->
        <!-- Writeable Vector table -->
        <!-- NOTE:
             Despite what you might hope for, this CANNOT go into the CCM area as the NVIC does not
             have access to that space (it sees the AHB layer and below, rather than the core's D-Bus)
        -->
        <!-- Alignment for the vector table is important to allow the NVIC to decode the proper locations
            (See Section 4.4.4 of the ARM Cortex-M4 Generic User Guide [ ARM DUI 0553A (ID121610) ] )
            Since this starts the SRAM block, it's aligned just fine for any size table.
        -->
        <ExecRegion Name="ER_VECTORS" Options="&gt;IRAM">
            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="*" Options="(VectorTable)" />
            <FileMapping Name=". = ALIGN(4);"/>
        </ExecRegion>

        <!-- used by the startup to initialize data -->
        <FileMapping Name="_sidata = LOADADDR (ER_RAM_RW);"/>

        <ExecRegion Name="ER_RAM_RW" Align="0x10" Base="ADDR(ER_VECTORS) + SIZEOF(ER_VECTORS)" Options="&gt;IRAM AT&gt;LR_FLASH ">
            <FileMapping Name=". = ALIGN(4);"/>
            <!-- create a global symbol at data start -->
            <FileMapping Name="_sdata = .;"/>
            <FileMapping Name="*(rwdata)"/>
            <FileMapping Name="*(.data .data.* .gnu.linkonce.d.*)"/>

            <FileMapping Name=". = ALIGN(4);"/>     
            <!-- define a global symbol at data end -->
            <FileMapping Name="_edata = .;"/>
        </ExecRegion>
        
        <ExecRegion Name="ER_RAM_RO" Align="0x10" Options="&gt;IRAM">
            <!-- Flash programming from Flash is safe on STM32 -->
            <!-- No need to place Flash programming code in RAM -->
            <!-- <FileMapping Name="*" Options="(SectionForFlashOperations)" /> -->
        </ExecRegion>

        <!-- Uninitialized data section -->
        <FileMapping Name=". = ALIGN(4);"/>

        <ExecRegion Name=".bss" Options="&gt;IRAM AT&gt;IRAM">
            <!-- This is used by the startup in order to initialize the .bss secion -->
            <!-- define a global symbol at bss start -->
            <FileMapping Name="_sbss = .;"/>
            <FileMapping Name="__bss_start__ = _sbss;"/>

            <FileMapping Name="*(.bss .bss.* .gnu.linkonce.b.*)" />
            <FileMapping Name="*(.zidata)" />
            <FileMapping Name="*(COMMON)" />
            
            <FileMapping Name=". = ALIGN(4);"/>
            <!-- define a global symbol at bss end -->
            <FileMapping Name="_ebss = .;"/>
            <FileMapping Name="__bss_end__ = _ebss;"/>
        </ExecRegion>

        <ExecRegion Name="/DISCARD/">
            <!--<FileMapping Name="*(.ARM.exidx*)" />-->
            <!--<FileMapping Name="*(.ARM.extab*)" />-->
            <FileMapping Name="libc.a ( * )" />
            <FileMapping Name="libm.a ( * )" />
            <FileMapping Name="libgcc.a ( * )" />
        </ExecRegion>

        <!--========= EXTERNAL RAM =============================================--> 
        <!-- Managed heap region -->
        <!-- Managed heap takes all available EXTRA RAM up to the last RAM address -->
        <ExecRegion Name="ER_MANAGED_HEAP" Options="&gt;EXTRAM">
            <FileMapping Name=". = ALIGN(4);"/> 
            <FileMapping Name="HeapBegin = .;"/>

            <!-- CONFIG MANAGED HEAP SIZE *** CHOSE ONLY ONE *** -->
            <!-- too make managed heap fill all available RAM use the line bellow -->
            <!--<FileMapping Name=". = %EXTRAM_Size% - 8;"/>-->
            <!-- too make managed heap fill the requested size use the line bellow -->
            <FileMapping Name=". = %Heap_Size%;"/>

            <FileMapping Name="HeapEnd = .;"/>
        </ExecRegion>

        <!-- ========= Internal CCM ============================================ -->

        <!-- heap and stack goes into CCM for faster access
            heap starts at CCM initial address and grows up
            stack pointer is at CCM last address and grows downward 
        -->

        <!-- ======== NOTE WHEN USING THE GRAPHICS LIBRARY =======  -->
        <!--
            The use of the Graphics library may require a substantial amount of heap RAM (because of bitmap manipulation and such)
            Make sure that the heap bellow has enough room for your requirements. If not make sure to realocate it to a suitable RAM section. 
        -->

        <!-- Highest address of the user mode stack -->
        <FileMapping Name="_estack = %CCM_BaseAddress% + %CCM_Size% - 8;"/>
        
        <ExecRegion Name="._user_heap_stack" Options="&gt;D_CCM">
            <FileMapping Name=". = ALIGN(8);" />
            <FileMapping Name="PROVIDE ( end = . );" />
            <FileMapping Name="PROVIDE ( _end = . );" />
        </ExecRegion>

        <ExecRegion Name="ER_DAT" Options="&gt;LR_DAT">
            <FileMapping Name="*" Options="(tinyclr_metadata)" />
        </ExecRegion>
        
        <ExecRegion Name="ER_CONFIG" Options="&gt;LR_CONFIG">
            <FileMapping Name="*" Options="(SectionForConfig)" />
        </ExecRegion>
    </NamedGroup>

    <GlobalVariable Name="__use_no_semihosting_swi"                 Value="0"/>
</ScatterFile>

