<?xml version="1.0"?>
<ScatterFile xmlns="http://schemas.microsoft.com/netmf/ScatterfileSchema.xsd">

    <!-- STM32F4 with 1M Flash, 128k SRAM, and 64k DATA CCM -->

    <Set Name="Valid" Value="false"/>

    <!-- ################################################################################ -->

    <!-- Memory Region base and size values for physical hardware to help clarify the mapping
         by making Symbolic names available instead of a bunch of numbers. These values are
         fixed in hardware and therefore, don't change.
    -->
    <!-- Internal FLASH -->
    <Set Name="IFLASH_BaseAddress"      Value="0x08000000"/>
    <Set Name="IFLASH_Size"             Value="0x00100000"/><!-- 1MB -->

    <!-- Internal Core Coupled Memory (CCM) [D-Bus] -->
    <Set Name="CCM_BaseAddress"         Value="0x10000000"/>
    <Set Name="CCM_Size"                Value="0x00010000"/><!-- 64KB -->

    <!-- Internal SRAM -->
    <Set Name="IRAM_BaseAddress"        Value="0x20000000"/>
    <Set Name="IRAM_Size"               Value="0x00020000"/><!-- 128KB -->

    <!-- Solution specific usage settings -->

    <!-- Internal FLASH -->
    <!--
         The flash memory layout must match BlockRange definitions
         in DeviceCode\Blockstorage\STM32F4\STM32F4_BlConfig.cpp
    -->
    <!-- TinyBooter sits at power on Reset vector-->
    <Set Name="BooterCode_BaseAddress"  Value="%IFLASH_BaseAddress%"/>
    <Set Name="BooterCode_Size"         Value="0x0000C000"/><!-- 48kB -->

    <Set Name="Code_BaseAddress"        Value="%BooterCode_BaseAddress%"/>
    <Set Name="Code_Size"               Value="%BooterCode_Size%"/>

    <!-- Internal CCM (D-Bus) -->
    <!-- Put Stack in CCM for high speed access, reducing overhead of stack usage -->
    <Set Name="Stack_Bottom"            Value="%CCM_BaseAddress%"/>
    <Set Name="Stack_Size"              Value="%CCM_Size%" />

    <!-- Internal SRAM -->
    <Set Name="Managed_Heap_Size"       Value="0x00017000"/><!-- 94k -->

    <Set Name="CustomHeap_Size"         Value="0x00001000"/><!--  4k -->


    <If Name="TARGETLOCATION" Value="FLASH">
        <Set Name="Valid"               Value="true"/>
    </If>

    <!-- ################################################################################ -->

    <If Name="Valid" Value="false">
        <Error Message="Configuration not recognized"/>
    </If>

    <EntryPoint Name="Reset_Handler" />

    <NamedGroup Name="MEMORY">
        <LoadRegion Name="D_CCM" Base="%CCM_BaseAddress%" Size="%CCM_Size%" />
        <LoadRegion Name="IRAM" Base="%IRAM_BaseAddress%" Size="%IRAM_Size%" />
        <LoadRegion Name="LR_%TARGETLOCATION%" Base="%Code_BaseAddress%" Size="%Code_Size%" />
    </NamedGroup>
        
    <!-- Handler mode (core exceptions / interrupts) can use only main stack -->
    <!-- Thread mode can use main stack (default) or process stack - selected in CONTROL special register -->
    <FileMapping Name="__main_stack_size = 0x8000;"/>
    <FileMapping Name="__process_stack_size = 0x8000;"/>



    <NamedGroup Name="SECTIONS">
    
        <!-- ========= INTERNAL FLASH ============================================ -->

        <!-- The startup code goes first into FLASH -->
        <ExecRegion Name=".isr_vector" Options="&gt;LR_%TARGETLOCATION%">
            <FileMapping Name=". = ALIGN(4);"/>
            <!-- Startup code -->
            <FileMapping Name="KEEP(*(.isr_vector))"/> 
            <FileMapping Name=". = ALIGN(4);"/>
        </ExecRegion>
     
        <ExecRegion Name="ER_%TARGETLOCATION%" Options="&gt;LR_%TARGETLOCATION%">  
            <FileMapping Name="KEEP" Options="(*(SectionForPowerOnReset))" />
            <FileMapping Name="*(SectionForBootstrapOperations)"/>
            <FileMapping Name="*(SectionForFlashOperations)"/>
            
            <FileMapping Name="*(.text .text.* .gnu.linkonce.t.*);"/>
            <FileMapping Name="*(i.*)"/>
            <FileMapping Name="*(.glue_7t .glue_7);"/>
            <FileMapping Name="*(.eh_frame);"/>
            <FileMapping Name="*(.eh_frame_hdr);"/>
            <FileMapping Name="*(.gcc_except_table);"/>

            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="KEEP(*(.init))"/>
            <FileMapping Name="KEEP(*(.fini))"/>

            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="*(.rodata .rodata.* .constdata .constdata.* .conststring .conststring* .gnu.linkonce.r.*)"/>

            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="*(.ARM.extab* .gnu.linkonce.armextab.*)"/>

            <!-- preinit_array -->
            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="PROVIDE_HIDDEN (__preinit_array_start = .);"/>
            <FileMapping Name="KEEP(*(.preinit_array .preinit_array.*))"/>
            <FileMapping Name="PROVIDE_HIDDEN (__preinit_array_end = .);"/>
            
            <!-- init_array -->
            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="PROVIDE_HIDDEN (__init_array_start = .);"/>
            <FileMapping Name="KEEP(*(SORT(.init_array.*)))"/>
            <FileMapping Name="KEEP(*(.init_array))"/>
            <FileMapping Name="PROVIDE_HIDDEN (__init_array_end = .);"/>

            <!-- fini_array -->
            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="PROVIDE_HIDDEN (__fini_array_start = .);"/>
            <FileMapping Name="KEEP(*(SORT(.fini_array.*)))"/>
            <FileMapping Name="KEEP(*(.fini_array))"/>
            <FileMapping Name="PROVIDE_HIDDEN (__fini_array_end = .);"/>

            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="*(tinyclr_metadata)" />            
        </ExecRegion>

        <FileMapping Name=". = ALIGN(4);"/>
        <FileMapping Name="__exidx_start = .;"/>

        <ExecRegion Name=".ARM.exidx" Options="&gt;LR_%TARGETLOCATION% ">
            <FileMapping Name="*(.ARM.exidx* .gnu.linkonce.armexidx.*)"/>
        </ExecRegion> 

        <FileMapping Name="__exidx_end = .;"/>

        <!-- ========= INTERNAL RAM ============================================= -->

        <!-- used by the startup to initialize data -->
        <FileMapping Name="_sidata = LOADADDR (ER_RAM_RW);"/>
        
        <!-- Initialized data sections goes into RAM, load LMA copy after code -->
        <ExecRegion Name="ER_RAM_RW" Options="&gt;IRAM AT&gt;LR_FLASH ">
            <FileMapping Name=". = ALIGN(4);"/>
            <!-- create a global symbol at data start -->
            <FileMapping Name="_sdata = .;"/>
            <FileMapping Name="*(rwdata)"/>
            <FileMapping Name="*(.data .data.* .gnu.linkonce.d.*)"/>

            <FileMapping Name=". = ALIGN(4);"/>     
            <!-- define a global symbol at data end -->
            <FileMapping Name="_edata = .;"/>
        </ExecRegion>

        <!-- Uninitialized data section -->
        <FileMapping Name=". = ALIGN(4);"/>
        
        <ExecRegion Name=".bss" Options="&gt;IRAM">
            <!-- This is used by the startup in order to initialize the .bss secion -->
            <!-- define a global symbol at bss start -->
            <FileMapping Name="_sbss = .;"/>
            <FileMapping Name="__bss_start__ = _sbss;"/>

            <FileMapping Name="*(.bss .bss.* .gnu.linkonce.b.*)" />
            <FileMapping Name="*(.zidata)" />
            <FileMapping Name="*(COMMON)" />
            
            <FileMapping Name=". = ALIGN(4);"/>
            <!-- define a global symbol at bss end -->
            <FileMapping Name="_ebss = .;"/>
            <FileMapping Name="__bss_end__ = _ebss;"/>
        </ExecRegion>

        <!-- Managed heap region -->
        <ExecRegion Name="ER_MANAGED_HEAP" Options="&gt;IRAM">
            <FileMapping Name=". = ALIGN(4);"/> 
            <FileMapping Name="HeapBegin = .;"/>
            <!--<FileMapping Name="*" Options="(SectionForHeapBegin)" />-->
            <!--<FileMapping Name=". += %Managed_Heap_Size%;"/>-->
            <FileMapping Name=". = %IRAM_Size% - SIZEOF(.bss) - SIZEOF(ER_RAM_RW) - 8;"/>
            <FileMapping Name="HeapEnd = .;"/>
        </ExecRegion>

        <ExecRegion Name="/DISCARD/">
            <!--<FileMapping Name="*(.ARM.exidx*)" />-->
            <!--<FileMapping Name="*(.ARM.extab*)" />-->
            <FileMapping Name="libc.a ( * )" />
            <FileMapping Name="libm.a ( * )" />
            <FileMapping Name="libgcc.a ( * )" />
        </ExecRegion>
        
        <!-- ========= Internal CCM ============================================ -->

        <!-- heap and stack goes into CCM for faster access
            heap starts at CCM initial address and grows up
            stack pointer is at CCM last address and grows downward 
        -->
        <!-- Highest address of the user mode stack -->
        <FileMapping Name="_estack = %CCM_BaseAddress% + %CCM_Size% - 8;"/>
        
        <ExecRegion Name="._user_heap_stack" Options="&gt;D_CCM">
            <FileMapping Name=". = ALIGN(8);" />
            <FileMapping Name="PROVIDE ( end = . );" />
            <FileMapping Name="PROVIDE ( _end = . );" />
        </ExecRegion>

    </NamedGroup>

    <!-- The following variables are used to simulate the ones autogenerated by ARMCC -->
    <GlobalVariable Name="Load$$ER_%TARGETLOCATION%$$Base"          Value="LOADADDR(ER_%TARGETLOCATION%)"/>
    <GlobalVariable Name="Image$$ER_%TARGETLOCATION%$$Length"       Value="SIZEOF(ER_%TARGETLOCATION%)"/>
    <!--<GlobalVariable Name="Image$$ER_RAM_RO$$Base"                   Value="ADDR(ER_RAM_RO)"/>-->
    <!--<GlobalVariable Name="Image$$ER_RAM_RO$$Length"                 Value="SIZEOF(ER_RAM_RO)"/>-->
    <!--<GlobalVariable Name="Load$$ER_RAM_RO$$Base"                    Value="LOADADDR(ER_RAM_RO)"/>-->
    <GlobalVariable Name="Image$$ER_RAM_RW$$Base"                   Value="ADDR(ER_RAM_RW)"/>
    <GlobalVariable Name="Image$$ER_RAM_RW$$Length"                 Value="SIZEOF(ER_RAM_RW)"/>
    <GlobalVariable Name="Load$$ER_RAM_RW$$Base"                    Value="LOADADDR(ER_RAM_RW)"/>
    <GlobalVariable Name="Image$$ER_RAM_RW$$ZI$$Base"               Value="ADDR(.bss)"/>
    <GlobalVariable Name="Image$$ER_RAM_RW$$ZI$$Length"             Value="SIZEOF(.bss)"/>
    <GlobalVariable Name="__use_no_semihosting_swi"                 Value="0"/>
</ScatterFile>

